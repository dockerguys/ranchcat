version: '2'
catalog:
  name: "IronFunctions"
  version: "1.0.0"
  description: "Serverless microservices API platform for the agile developer"
  questions:
    - variable: "ironfunc_worker_image"
      label: "API Worker Image"
      description: "Image to use for API worker node"
      required: true
      default: "iron/functions:0.2.59"
      type: enum
      options: # List of options if using type of `enum`
        - iron/functions:0.2.59
    - variable: "ironfunc_ui_image"
      label: "Web Portal Image"
      description: "Image to use for web portal"
      required: true
      default: "iron/functions-ui:latest"
      type: enum
      options: # List of options if using type of `enum`
        - iron/functions-ui:latest
    - variable: "postgres_image"
      label: "PostgresDB Image"
      description: "Image to use for PostGres database. This database is used exclusively for this stack."
      required: true
      default: "postgres:11-alpine"
      type: enum
      options: # List of options if using type of `enum`
        - postgres:11-alpine
    - variable: "redis_image"
      label: "Redis DB Image"
      description: "Image to use for Redis database. This database is used exclusively for this stack."
      required: true
      default: "redis:latest"
      type: enum
      options: # List of options if using type of `enum`
        - redis:latest
    - variable: postgres_db_password
      description: "Password for database user 'postgres'."
      label: "Admin Password"
      type: "password"
      required: true
      default: ChangeMeChangeMe
    - variable: "log_level"
      label: "Log Level"
      description: "Log verbosity level. Set to 'DEBUG' for development purposes, or 'INFO' for production use."
      required: true
      default: "INFO"
      type: enum
      options: # List of options if using type of `enum`
        - INFO
        - DEBUG
    - variable: datavolume_name
      label: Volume Name
      description: |
        To store the application data in a volume, enter the volume name that should be used.
        By default this will be a (host scoped) named Docker volume. Set "Storage Driver" other storage options.
      required: false
      type: string
    - variable: storage_driver
      label: Volume Storage Driver
      description: |
        To use a stack scoped volume backed by a persistent storage service, enter the name
        of an existing storage driver (e.g. rancher-nfs). This also requires "Volume Name" to be set.
      required: true
      type: "enum"
      default: "local"
      options:
        - local
        - rancher-nfs
    - variable: storage_driver_nfsopts_host
      label: NFS Driver Host
      description: |
        Specify a NFS hostname instead of the default NFS server. Only use this option if "Volume Storage Driver" is 
        set to "rancher-nfs".
      required: false
      type: string
    - variable: storage_driver_nfsopts_export
      label: NFS Driver Volume Path
      description: |
        Specify the path on the NFS server that will be mounted (e.g. "/storage/nfsvol"). The full directory created 
        on the NFS server will be this path and the volume name. Do not append the "/" at the end. The full path must 
        already exist on the NFS server. Only use this option if "Volume Storage Driver" is set to "rancher-nfs".
      required: false
      type: string
    - variable: host_affinity_label
      description: "The stack will launch on one of the hosts that has this label."
      label: "Host Affinity Label"
      type: "string"
      required: false
    - variable: repull_image
      description: "Pull from registry source even if the host already have a local image with the same tag."
      label: "Reload Images"
      type: enum
      options:
        - always
        - never
      required: true
      default: "never"
    - variable: docker_registry_name
      description: "Pull from private registry. Leave blank to pull from public Docker Hub."
      label: "Private Registry"
      type: "string"
      required: false
services:
  functions-ui:
    scale: 1
    start_on_create: true
    health_check:
      response_timeout: 2000
      healthy_threshold: 2
      unhealthy_threshold: 3
      port: 4000
      strategy: recreate
      initializing_timeout: 300000
      interval: 2000
      reinitializing_timeout: 120000
  functions-worker:
    scale: 1
    start_on_create: true
    health_check:
      response_timeout: 2000
      healthy_threshold: 2
      unhealthy_threshold: 3
      port: 8080
      strategy: recreate
      initializing_timeout: 300000
      interval: 2000
      reinitializing_timeout: 120000
  postgres:
    scale: 1
    start_on_create: true
  redis:
    scale: 1
    start_on_create: true
